---
const {
  triggerId,
  title
} = Astro.props
---

<div class="modal" role="dialog" aria-labelledby={triggerId}>
  <div class="modal__inner">
    <div class="modal__content">
      <h3 tabindex="-1">
        {title}
      </h3>
      <slot>Modal description.</slot>
      <button aria-label="Close modal" data-close-modal>
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20"><path fill="#3B4262" fill-rule="evenodd" d="M16.97 0l2.122 2.121-7.425 7.425 7.425 7.425-2.121 2.12-7.425-7.424-7.425 7.425L0 16.97l7.425-7.425L0 2.121 2.121 0l7.425 7.425L16.971 0z" opacity=".25"/></svg>
      </button>
    </div>
  </div>
</div>

<script type="module">
  // variables
  const body = document.querySelector('body')
  const modal = document.querySelector('.modal')
  const modalId = modal.getAttribute('aria-labelledby')
  const modalCloseButton = modal.querySelector('[data-close-modal]')
  const modalTrigger = document.querySelector(`#${modalId}`)
  
  // functions
  const teleportToRoot = element => {
    element.remove()
    body.appendChild(element)
  }

  const getKeyboardFocusableElements = element => {
    return [...element.querySelectorAll(
      'a, button, input, textarea, select, details,[tabindex]:not([tabindex="-1"])'
    )]
      .filter(el => !el.hasAttribute('disabled'))
  }

  const trapFocus = event => {
    const focusables = getKeyboardFocusableElements(modal)
    const firstFocusable = focusables[0]
    const lastFocusable = focusables[focusables.length - 1]

    if (document.activeElement === lastFocusable && event.key === 'Tab' && !event.shiftKey) {
      event.preventDefault()
      firstFocusable.focus()
    }

    if (document.activeElement === firstFocusable && event.key === 'Tab' && event.shiftKey) {
      event.preventDefault()
      lastFocusable.focus()
    }
  }

  const openModal = _ => {
    const modalTitle = modal.querySelector('h3')

    modal.classList.add('show')
    body.classList.add('modal-is-active')
    modalTitle.focus()
    document.addEventListener('keydown', trapFocus)

    modal.addEventListener('keydown', event => {
      if (event.key === 'Escape') {
        closeModal()
      }
    })
  }

  const closeModal = _ => {
    modal.classList.remove('show')
    body.classList.remove('modal-is-active')
    modalTrigger.focus()
    document.removeEventListener('keydown', trapFocus)
  }

  // execution
  teleportToRoot(modal)

  modalTrigger.addEventListener('click', openModal)

  modalCloseButton.addEventListener('click', closeModal)

  modal.addEventListener('click', event => { 
    if (!event.target.closest('.modal__content')) {
      closeModal()
    }
  })

  window.closeModal = closeModal
</script>

<style lang="scss" is:global>
  @use '../assets/scss/base/breakpoint' as *;

  body.modal-is-active > *:not(.modal) {
    filter: blur(6px);
  }

  .modal {
    height: 0;
    position: fixed;
    visibility: hidden;
    z-index: -10;

    &.show {
      display: grid;
      place-items: center;
      visibility: visible;
      height: auto;
      background-color: rgba(0, 0, 0, 0.5);
      inset: 0;
      z-index: 10;

      .modal__inner {
        opacity: 1;
      }
    }
  }

  .modal__inner {
    width: 100vw;
    height: 100vh;
    color: black;
    background-color: white;
    border-radius: 1rem;
    opacity: 0;

    @include breakpoint(700) {
      width: clamp(30ch, 70%, 55ch);
      height: auto;
    }
  }

  .modal__content {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    gap: 2rem;
    height: 100%;
    padding: 4rem 2rem;

    @include breakpoint(700) {
      position: relative;
    }
  }

  h3 {
    color: var(--dark-text);
    font-weight: 700;
    text-transform: uppercase;

    @include breakpoint(700) {
      align-self: flex-start;
    }
  }

  button[data-close-modal] {
    padding: 1rem;
    border: 2px solid var(--header-outline);
    border-radius: 0.5rem;
    transition: background-color 0.15s ease-in-out;

    @include breakpoint(700) {
      position: absolute;
      right: 2rem;
    }

    &:hover,
    &:focus {
      border-color: var(--error-600);
      background-color: var(--error-600);
      
      svg path {
        fill: var(--neutral-100);
        opacity: 1;
      }
    }
  }
</style>
